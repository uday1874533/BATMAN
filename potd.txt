
class Solution {
  public:
    vector<int> articulationPoints(int V, vector<vector<int>>& edges) {
    // Create adjacency list
    vector<int> adj[V];
    for (auto& edge : edges) {
        int u = edge[0], v = edge[1];
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    vector<int> disc(V, -1), low(V, -1), parent(V, -1);
    vector<bool> visited(V, false), isAP(V, false);
    int time = 0;

    function<void(int)> dfs = [&](int u) {
        visited[u] = true;
        disc[u] = low[u] = ++time;
        int children = 0;

        for (int v : adj[u]) {
            if (!visited[v]) {
                children++;
                parent[v] = u;
                dfs(v);

                low[u] = min(low[u], low[v]);

                // Non-root and low[v] >= disc[u]
                if (parent[u] != -1 && low[v] >= disc[u])
                    isAP[u] = true;

                // Root with 2 or more children
                if (parent[u] == -1 && children > 1)
                    isAP[u] = true;
            }
            else if (v != parent[u]) {
                low[u] = min(low[u], disc[v]); // back edge
            }
        }
    };

    // Apply DFS for all components
    for (int i = 0; i < V; ++i) {
        if (!visited[i])
            dfs(i);
    }

    vector<int> result;
    for (int i = 0; i < V; ++i) {
        if (isAP[i])
            result.push_back(i);
    }

    if (result.empty())
        return {-1};

    sort(result.begin(), result.end());
    return result;
}

};